/*
 * FINBOURNE Honeycomb Web API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.42
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.luminesce.api;

import com.finbourne.luminesce.ApiException;
import com.finbourne.luminesce.model.BackgroundQueryCancelResponse;
import com.finbourne.luminesce.model.BackgroundQueryProgressResponse;
import com.finbourne.luminesce.model.BackgroundQueryResponse;
import com.finbourne.luminesce.model.LusidProblemDetails;
import java.time.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoricallyExecutedQueriesApi
 */
@Ignore
public class HistoricallyExecutedQueriesApiTest {

    private final HistoricallyExecutedQueriesApi api = new HistoricallyExecutedQueriesApi();

    
    /**
     * [EXPERIMENTAL] CancelHistory: Cancels (if running) or clears the data from (if completed) a previously started History query
     *
     * Cancel the query (if still running) / clear the data (if already returned) The following error codes are to be anticipated with standard Problem Detail reports: - 401 Unauthorized - 404 Not Found : The requested query result doesn&#39;t exist and is not running. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelHistoryTest() throws ApiException {
        String executionId = null;
        BackgroundQueryCancelResponse response = api.cancelHistory(executionId);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] FetchHistoryResultJson: Fetches the result from a previously started query, in JSON format.
     *
     * Fetch the data in Json format (if available, or if not simply being informed it is not yet ready) The following error codes are to be anticipated with standard Problem Detail reports: - 401 Unauthorized - 404 Not Found : The requested query result doesn&#39;t (yet) exist. - 429 Too Many Requests : Please try your request again soon   1. The query has been executed successfully in the past yet the server-instance receiving this request (e.g. from a load balancer) doesn&#39;t yet have this data available.   1. By virtue of the request you have just placed this will have started to load from the persisted cache and will soon be available.   1. It is also the case that the original server-instance to process the original query is likely to already be able to service this request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchHistoryResultJsonTest() throws ApiException {
        String executionId = null;
        String sortBy = null;
        String filter = null;
        String select = null;
        String groupBy = null;
        Integer limit = null;
        Integer page = null;
        Boolean jsonProper = null;
        String response = api.fetchHistoryResultJson(executionId, sortBy, filter, select, groupBy, limit, page, jsonProper);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] FetchQueryResultHistogram: Fetches the result from a previously started query, converts it to a histogram (counts in buckets).
     *
     * Fetch the data in Json format (if available, or if not simply being informed it is not yet ready) The following error codes are to be anticipated with standard Problem Detail reports: - 401 Unauthorized - 404 Not Found : The requested query result doesn&#39;t (yet) exist. - 429 Too Many Requests : Please try your request again soon   1. The query has been executed successfully in the past yet the server-instance receiving this request (e.g. from a load balancer) doesn&#39;t yet have this data available.   1. By virtue of the request you have just placed this will have started to load from the persisted cache and will soon be available.   1. It is also the case that the original server-instance to process the original query is likely to already be able to service this request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchQueryResultHistogramTest() throws ApiException {
        String executionId = null;
        String bucketSize = null;
        String filter = null;
        Boolean jsonProper = null;
        String response = api.fetchQueryResultHistogram(executionId, bucketSize, filter, jsonProper);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] GetHistory: Shows queries executed in a given historical time window (in Json format).
     *
     *  Starts to load the historical query logs for a certain time range, search criteria, etc.  The following error codes are to be anticipated with standard Problem Detail reports: - 401 Unauthorized 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHistoryTest() throws ApiException {
        OffsetDateTime startAt = null;
        OffsetDateTime endAt = null;
        String freeTextSearch = null;
        Boolean showAll = null;
        BackgroundQueryResponse response = api.getHistory(startAt, endAt, freeTextSearch, showAll);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] GetProgressOfHistory: View progress information (up until this point) of a history query
     *
     * View progress information (up until this point) of previously started History query The following error codes are to be anticipated with standard Problem Detail reports: - 401 Unauthorized - 404 Not Found : The requested query result doesn&#39;t exist and is not running. - 429 Too Many Requests : Please try your request again soon   1. The query has been executed successfully in the past yet the server-instance receiving this request (e.g. from a load balancer) doesn&#39;t yet have this data available.   1. By virtue of the request you have just placed this will have started to load from the persisted cache and will soon be available.   1. It is also the case that the original server-instance to process the original query is likely to already be able to service this request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProgressOfHistoryTest() throws ApiException {
        String executionId = null;
        BackgroundQueryProgressResponse response = api.getProgressOfHistory(executionId);

        // TODO: test validations
    }
    
}
