/*
 * FINBOURNE Honeycomb Web API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.42
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.luminesce.api;

import com.finbourne.luminesce.ApiException;
import com.finbourne.luminesce.model.BackgroundMultiQueryProgressResponse;
import com.finbourne.luminesce.model.BackgroundMultiQueryResponse;
import com.finbourne.luminesce.model.BackgroundQueryCancelResponse;
import com.finbourne.luminesce.model.LusidProblemDetails;
import com.finbourne.luminesce.model.MultiQueryDefinitionType;
import java.time.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MultiQueryExecutionApi
 */
@Ignore
public class MultiQueryExecutionApiTest {

    private final MultiQueryExecutionApi api = new MultiQueryExecutionApi();

    
    /**
     * [EXPERIMENTAL] CancelMultiQuery: Cancels (if running) or clears the data from (if completed) a previously started query-set
     *
     * Cancel the query-set (if still running) / clear the data (if already returned) The following error codes are to be anticipated with standard Problem Detail reports: - 401 Unauthorized - 404 Not Found : The requested query result doesn&#39;t exist and is not running. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelMultiQueryTest() throws ApiException {
        String executionId = null;
        BackgroundQueryCancelResponse response = api.cancelMultiQuery(executionId);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] GetProgressOfMultiQuery: View progress information (up until this point) for the entire query-set
     *
     * View progress information (up until this point) for the entire query-set The following error codes are to be anticipated with standard Problem Detail reports: - 401 Unauthorized - 404 Not Found : The requested query result doesn&#39;t exist and is not running. - 429 Too Many Requests : Please try your request again soon   1. The query has been executed successfully in the past yet the server-instance receiving this request (e.g. from a load balancer) doesn&#39;t yet have this data available.   1. By virtue of the request you have just placed this will have started to load from the persisted cache and will soon be available.   1. It is also the case that the original server-instance to process the original query is likely to already be able to service this request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProgressOfMultiQueryTest() throws ApiException {
        String executionId = null;
        BackgroundMultiQueryProgressResponse response = api.getProgressOfMultiQuery(executionId);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] StartQueries: Starts to Execute the HoneycombSql statements in the background.
     *
     *  Allow for starting a potentially long running query and getting back an immediate response with how to  - fetch the data in various formats (if available, or if not simply being informed it is not yet ready), on a per result basis - view progress information (up until this point), for all results in one go - cancel the queries (if still running) / clear the data (if already returned)  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - there was something wrong with your query syntax (the issue was detected at parse-time) - 401 Unauthorized 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startQueriesTest() throws ApiException {
        MultiQueryDefinitionType type = null;
        String body = null;
        OffsetDateTime asAt = null;
        OffsetDateTime effectiveAt = null;
        Integer limit1 = null;
        Integer limit2 = null;
        String input1 = null;
        String input2 = null;
        String input3 = null;
        Integer timeoutSeconds = null;
        Integer keepForSeconds = null;
        BackgroundMultiQueryResponse response = api.startQueries(type, body, asAt, effectiveAt, limit1, limit2, input1, input2, input3, timeoutSeconds, keepForSeconds);

        // TODO: test validations
    }
    
}
